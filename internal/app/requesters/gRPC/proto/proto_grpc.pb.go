// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: proto/proto.proto

package proto

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GophKeeperService_SaveBinData_FullMethodName = "/GRPC.GophKeeperService/SaveBinData"
	GophKeeperService_GetBinData_FullMethodName  = "/GRPC.GophKeeperService/GetBinData"
)

// GophKeeperServiceClient is the client API for GophKeeperService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GophKeeperServiceClient interface {
	SaveBinData(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SaveBinDataRequest, empty.Empty], error)
	GetBinData(ctx context.Context, in *GetBinDataRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetBinDataResponse], error)
}

type gophKeeperServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGophKeeperServiceClient(cc grpc.ClientConnInterface) GophKeeperServiceClient {
	return &gophKeeperServiceClient{cc}
}

func (c *gophKeeperServiceClient) SaveBinData(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SaveBinDataRequest, empty.Empty], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GophKeeperService_ServiceDesc.Streams[0], GophKeeperService_SaveBinData_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SaveBinDataRequest, empty.Empty]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GophKeeperService_SaveBinDataClient = grpc.ClientStreamingClient[SaveBinDataRequest, empty.Empty]

func (c *gophKeeperServiceClient) GetBinData(ctx context.Context, in *GetBinDataRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetBinDataResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GophKeeperService_ServiceDesc.Streams[1], GophKeeperService_GetBinData_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetBinDataRequest, GetBinDataResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GophKeeperService_GetBinDataClient = grpc.ServerStreamingClient[GetBinDataResponse]

// GophKeeperServiceServer is the server API for GophKeeperService service.
// All implementations must embed UnimplementedGophKeeperServiceServer
// for forward compatibility.
type GophKeeperServiceServer interface {
	SaveBinData(grpc.ClientStreamingServer[SaveBinDataRequest, empty.Empty]) error
	GetBinData(*GetBinDataRequest, grpc.ServerStreamingServer[GetBinDataResponse]) error
	mustEmbedUnimplementedGophKeeperServiceServer()
}

// UnimplementedGophKeeperServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGophKeeperServiceServer struct{}

func (UnimplementedGophKeeperServiceServer) SaveBinData(grpc.ClientStreamingServer[SaveBinDataRequest, empty.Empty]) error {
	return status.Errorf(codes.Unimplemented, "method SaveBinData not implemented")
}
func (UnimplementedGophKeeperServiceServer) GetBinData(*GetBinDataRequest, grpc.ServerStreamingServer[GetBinDataResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetBinData not implemented")
}
func (UnimplementedGophKeeperServiceServer) mustEmbedUnimplementedGophKeeperServiceServer() {}
func (UnimplementedGophKeeperServiceServer) testEmbeddedByValue()                           {}

// UnsafeGophKeeperServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GophKeeperServiceServer will
// result in compilation errors.
type UnsafeGophKeeperServiceServer interface {
	mustEmbedUnimplementedGophKeeperServiceServer()
}

func RegisterGophKeeperServiceServer(s grpc.ServiceRegistrar, srv GophKeeperServiceServer) {
	// If the following call pancis, it indicates UnimplementedGophKeeperServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GophKeeperService_ServiceDesc, srv)
}

func _GophKeeperService_SaveBinData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GophKeeperServiceServer).SaveBinData(&grpc.GenericServerStream[SaveBinDataRequest, empty.Empty]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GophKeeperService_SaveBinDataServer = grpc.ClientStreamingServer[SaveBinDataRequest, empty.Empty]

func _GophKeeperService_GetBinData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetBinDataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GophKeeperServiceServer).GetBinData(m, &grpc.GenericServerStream[GetBinDataRequest, GetBinDataResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GophKeeperService_GetBinDataServer = grpc.ServerStreamingServer[GetBinDataResponse]

// GophKeeperService_ServiceDesc is the grpc.ServiceDesc for GophKeeperService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GophKeeperService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GRPC.GophKeeperService",
	HandlerType: (*GophKeeperServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SaveBinData",
			Handler:       _GophKeeperService_SaveBinData_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetBinData",
			Handler:       _GophKeeperService_GetBinData_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/proto.proto",
}
